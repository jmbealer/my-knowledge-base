:PROPERTIES:
:ID:       cf20a83e-974e-48fc-9b34-f4dbd92a2bcd
:mtime:    20230206181543 20220712212128
:ctime:    20220712211827
:END:
#+title: jsControlFlow
#+date: [2022-07-12 Tue 21:18]

** control flow

Control flow Also called flow of execution,
the tools provided by a programming language to conditionally determine which set of instructions runs

Conditional statement
A statement that tells the code to perform different tasks based on different kinds of information

if statement
if (condition) {
  statement
}
#+begin_src js
if (1 === 1) {
    console.log("hello")
}
#+end_src

if else statement
if (condition) {
  statement1
} else {
  statement2
}

#+begin_src js
if (1 === 2) {
    console.log("hello");
} else {
    console.log("world");
}
#+end_src

if else if statement
if (condition) {
  statement1
} else if {
  statement2
} else {
  statement3
}

#+begin_src js
if (1 === 2) {
    console.log("hello");
} else if  ( 2 === 2 ){
    console.log("foo");
} else {
    console.log("world");
}
#+end_src

Use Conditional Logic with If Statements
if statements are used to make decisions in code. The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as Boolean conditions and they may only be true or false.
When the condition evaluates to true, the program executes the statement inside the curly braces. When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.
Pseudocode
if (condition is true) {
  statement is executed
}
Example
function test (myCondition) {
  if (myCondition) {
    return "It was true";
  }
  return "It was false";
}
test(true);
test(false);
test(true) returns the string It was true, and test(false) returns the string It was false.
When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not. Since it is true, the function returns It was true. When we call test with a value of false, myCondition is not true and the statement in the curly braces is not executed and the function returns It was false.
Create an if statement inside the function to return Yes, that was true if the parameter wasThatTrue is true and return No, that was false otherwise.

Comparison with the Greater Than Or Equal To Operator
The greater than or equal to operator (>=) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, the greater than or equal to operator will convert data types while comparing.
Examples
6   >=  6  // true
7   >= '3' // true
2   >=  3  // false
'7' >=  9  // false
Add the greater than or equal to operator to the indicated lines so that the return statements make sense.

Comparison with the Less Than Operator
The less than operator (<) compares the values of two numbers. If the number to the left is less than the number to the right, it returns true. Otherwise, it returns false. Like the equality operator, the less than operator converts data types while comparing.
Examples
2   < 5 // true
'3' < 7 // true
5   < 5 // false
3   < 2 // false
'8' < 4 // false
Add the less than operator to the indicated lines so that the return statements make sense.

Comparison with the Less Than Or Equal To Operator
The less than or equal to operator (<=) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns true. If the number on the left is greater than the number on the right, it returns false. Like the equality operator, the less than or equal to operator converts data types.
Examples
4   <= 5 // true
'7' <= 7 // true
5   <= 5 // true
3   <= 2 // false
'8' <= 4 // false
Add the less than or equal to operator to the indicated lines so that the return statements make sense.

Comparisons with the Logical And Operator
Sometimes you will need to test more than one thing at a time. The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
The same effect could be achieved by nesting an if statement inside another if:
if (num > 5) {
  if (num < 10) {
    return "Yes";
  }
}
return "No";
will only return Yes if num is greater than 5 and less than 10. The same logic can be written as:
if (num > 5 && num < 10) {
  return "Yes";
}
return "No";
Replace the two if statements with one statement, using the && operator, which will return the string Yes if val is less than or equal to 50 and greater than or equal to 25. Otherwise, will return the string No.

Comparisons with the Logical Or Operator
The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.
The logical or operator is composed of two pipe symbols: (||). This can typically be found between your Backspace and Enter keys.
The pattern below should look familiar from prior waypoints:
if (num > 10) {
  return "No";
}
if (num < 5) {
  return "No";
}
return "Yes";
will return Yes only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:
if (num > 10 || num < 5) {
  return "No";
}
return "Yes";
Combine the two if statements into one statement which returns the string Outside if val is not between 10 and 20, inclusive. Otherwise, return the string Inside.

Introducing Else Statements
When a condition for an if statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an else statement, an alternate block of code can be executed.
if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}
Combine the if statements into a single if/else statement.

Introducing Else If Statements
If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.
if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}
Convert the logic to use else if statements.

Logical Order in If Else Statements
Order is important in if, else if statements.
The function is executed from top to bottom so you will want to be careful of what statement comes first.
Take these two functions as an example.
Here's the first:
function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}
And the second just switches the order of the statements:
function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}
While these two functions look nearly identical if we pass a number to both we get different outputs.
foo(0)
bar(0)
foo(0) will return the string Less than one, and bar(0) will return the string Less than two.
Change the order of logic in the function so that it will return the correct statements in all cases.

Chaining If Else Statements
if/else statements can be chained together for complex logic. Here is pseudocode of multiple chained if / else if statements:
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}
Write chained if/else if statements to fulfill the following conditions:
num < 5 - return Tiny
num < 10 - return Small
num < 15 - return Medium
num < 20 - return Large
num >= 20 - return Huge

Selecting from Many Options with Switch Statements
If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched case value until a break is encountered.
Here is an example of a switch statement:
switch (lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
case values are tested with strict equality (===). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.
Write a switch statement which tests val and sets answer for the following conditions:
1 - alpha
2 - beta
3 - gamma
4 - delta

Adding a Default Option in Switch Statements
In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think of it like the final else statement in an if/else chain.
A default statement should be the last case.
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}
Write a switch statement to set answer for the following conditions:
a - apple
b - bird
c - cat
default - stuff

Multiple Identical Options in Switch Statements
If the break statement is omitted from a switch statement's case, the following case statement(s) are executed until a break is encountered. If you have multiple inputs with the same output, you can represent them in a switch statement like this:
let result = "";
switch (val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}
Cases for 1, 2, and 3 will all produce the same result.
Write a switch statement to set answer for the following ranges:
1-3 - Low
4-6 - Mid
7-9 - High
Note: You will need to have a case statement for each number in the range.

Replacing If Else Chains with Switch
If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:
if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:
switch (val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}
Change the chained if/else if statements into a switch statement.

Control flow
    Also called flow of execution, the tools provided by a programming language to conditionally determine which set of instructions runs

JavaScript if, else, and else if

Conditional statements are used to perform different actions based on different conditions.
Conditional Statements

Very often when you write code, you want to perform different actions for different decisions.

You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:

    Use if to specify a block of code to be executed, if a specified condition is true
    Use else to specify a block of code to be executed, if the same condition is false
    Use else if to specify a new condition to test, if the first condition is false
    Use switch to specify many alternative blocks of code to be executed

The switch statement is described in the next chapter.
The if Statement

Use the if statement to specify a block of JavaScript code to be executed if a condition is true.
Syntax
if (condition) {
  //  block of code to be executed if the condition is true
}

Note that if is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.
Example

Make a "Good day" greeting if the hour is less than 18:00:
if (hour < 18) {
  greeting = "Good day";
}

The result of greeting will be:
Good day
The else Statement

Use the else statement to specify a block of code to be executed if the condition is false.
if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}
Example

If the hour is less than 18, create a "Good day" greeting, otherwise "Good evening":
if (hour < 18) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

The result of greeting will be:
Good day
The else if Statement

Use the else if statement to specify a new condition if the first condition is false.
Syntax
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}
Example

If time is less than 10:00, create a "Good morning" greeting, if not, but time is less than 20:00, create a "Good day" greeting, otherwise a "Good evening":
if (time < 10) {
  greeting = "Good morning";
} else if (time < 20) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

The result of greeting will be:
Good day
More Examples

Random link
This example will write a link to either W3Schools or to the World Wildlife Foundation (WWF). By using a random number, there is a 50% chance for each of the links.
Test Yourself With Exercises
Exercise:

Fix the if statement to alert "Hello World" if x is greater than y.

if x > y
  alert("Hello World");


Start the Exercise

JavaScript Switch Statement

The switch statement is used to perform different actions based on different conditions.
The JavaScript Switch Statement

Use the switch statement to select one of many code blocks to be executed.
Syntax
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

This is how it works:

    The switch expression is evaluated once.
    The value of the expression is compared with the values of each case.
    If there is a match, the associated block of code is executed.
    If there is no match, the default code block is executed.

Example

The getDay() method returns the weekday as a number between 0 and 6.

(Sunday=0, Monday=1, Tuesday=2 ..)

This example uses the weekday number to calculate the weekday name:
switch (new Date().getDay()) {
  case 0:
    day = "Sunday";
    break;
  case 1:
    day = "Monday";
    break;
  case 2:
     day = "Tuesday";
    break;
  case 3:
    day = "Wednesday";
    break;
  case 4:
    day = "Thursday";
    break;
  case 5:
    day = "Friday";
    break;
  case 6:
    day = "Saturday";
}

The result of day will be:
Saturday
The break Keyword

When JavaScript reaches a break keyword, it breaks out of the switch block.

This will stop the execution inside the switch block.

It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.

Note: If you omit the break statement, the next case will be executed even if the evaluation does not match the case.
The default Keyword

The default keyword specifies the code to run if there is no case match:
Example

The getDay() method returns the weekday as a number between 0 and 6.

If today is neither Saturday (6) nor Sunday (0), write a default message:
switch (new Date().getDay()) {
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
    break;
  default:
    text = "Looking forward to the Weekend";
}

The result of text will be:
Today is Saturday

The default case does not have to be the last case in a switch block:
Example
switch (new Date().getDay()) {
  default:
    text = "Looking forward to the Weekend";
    break;
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
}

If default is not the last case in the switch block, remember to end the default case with a break.
Common Code Blocks

Sometimes you will want different switch cases to use the same code.

In this example case 4 and 5 share the same code block, and 0 and 6 share another code block:
Example
switch (new Date().getDay()) {
  case 4:
  case 5:
    text = "Soon it is Weekend";
    break;
  case 0:
  case 6:
    text = "It is Weekend";
    break;
  default:
    text = "Looking forward to the Weekend";
}
Switching Details

If multiple cases matches a case value, the first case is selected.

If no matching cases are found, the program continues to the default label.

If no default label is found, the program continues to the statement(s) after the switch.
Strict Comparison

Switch cases use strict comparison (===).

The values must be of the same type to match.

A strict comparison can only be true if the operands are of the same type.

In this example there will be no match for x:
Example
let x = "0";
switch (x) {
  case 0:
    text = "Off";
    break;
  case 1:
    text = "On";
    break;
  default:
    text = "No value found";
}
Test Yourself With Exercises
Exercise:

Create a switch statement that will alert "Hello" if fruits is "banana", and "Welcome" if fruits is "apple".

(fruits) {
  "Banana":
    alert("Hello")
    break;
  "Apple":
    alert("Welcome")
    break;
}


Start the Exercise

*** control flow thinkful

Control flow
1.5 hoursAverage Reading Time
Learning Objective
By the end of this lesson, you will be able to write if/else statements concisely. You'll also be able to use switch statements to control the flow of programs.

Overview
You already know how to use if/else statements to control the flow of code. And although you can always effectively control the flow of the code with the if/else statements that you've learned so far, there are some additional tools that can make your code simpler. In this lesson, you will explore different ways of writing if/else statements. You'll also learn about switch statements, which offer another way of controlling the flow of programs.

It's important to know the various tools that you have available as a developer. Ultimately, the tool that you'll use in specific cases will likely come down to your personal preferences.

Start by watching the video below, which provides a brief introduction to simple if statements and the switch statement. Then, read through the rest of the lesson and complete the practice work required. This will give you a full understanding of these concepts.


Single-line if statements
There's a lot of talk about if/else statements. And with good reason—they're pretty useful. But sometimes you don't need an else statement as part of your conditional. Take a look:

function getPrice(product) {
  let price = product.priceInCents;
  if (product.onSale) {
    price = price * 0.9;
  }

  return price;
}

const product = {
  priceInCents: 2100,
  name: "Red Beanie",
  size: "L",
  onSale: true,
};
getPrice(product); //> 1890
Here, the getPrice() function applies a 10% discount to any item that has onSale set to a truthy value. And although the above code sample is perfectly fine, you may also see the following:

function getPrice(product) {
  let price = product.priceInCents;
  if (product.onSale) price = price * 0.9;

  return price;
}
This function definition, by contrast, has removed that set of curly brackets {} and has instead added the remaining line, price=price*0.9, to the line above it. However, you should only consolidate lines like this in your own code if the content inside the block is very short. Otherwise, it will be too difficult to read.

It's important to note that there is no substantive difference between these two options. They simply look different.

The conditional operator
The conditional operator, also commonly called the ternary operator, is a way to write a short if/else statement. It should be used only if the overall if/else statement is very short. The syntax works like this:

(conditional expression) ? (expression if true) : (expression if false)
Take a look at the following rewrite of the getPrice() function. As you can see, this function is now much more concise, which makes it cleaner and easier to read.

function getPrice(product) {
  return product.onSale ? product.priceInCents * 0.9 : product.priceInCents;
}
To make sure you understand what is happening here, take a moment to break this down. The expression before the question mark is the conditional. If it evaluates to a truthy value, the expression after the ? will be returned. But if the conditional evaluates to a falsy value, the expression after the colon : will be returned.

When it comes to comparing the options discussed here, there's no one best approach. The single-line if statement, the conditional operator, and a full if/else statement can all work for you. Over time, you'll develop preferences based on which method you find to be clearest and easiest to read. However, because you're still learning the ropes, you should default to writing out the full statement for the time being. This will help you become comfortable with the process before you start abbreviating it.

To learn more, check out MDN's page about the conditional operator.

The switch statement
Sometimes, like in the cases noted above, your if/else statements can be quite short. But sometimes, they can be very long.

Take a look at this example. What do you think this code does?

function getStateSalesTax(stateAbbreviation) {
  let result;
  if (stateAbbreviation === "CA") {
    result = 0.0725;
  } else if (stateAbbreviation === "CO") {
    result = 0.029;
  } else if (stateAbbreviation === "GA") {
    result = 0.04;
  } else if (stateAbbreviation === "VT") {
    result = 0.06;
  } else {
    result = 0;
  }

  return result;
}
The code above is actually pretty straightforward—depending on the state that is inputted, a different value (in this case, a sales tax amount) is returned. But this might feel a bit clunky. Fortunately, there's another way that you could write the function above: with the switch statement.

function getStateSalesTax(stateAbbreviation) {
  let result;
  switch (stateAbbreviation) {
    case "CA":
      result = 0.0725;
      break;
    case "CO":
      result = 0.029;
      break;
    case "GA":
      result = 0.04;
      break;
    case "VT":
      result = 0.06;
      break;
    default:
      result = 0;
  }

  return result;
}
So, what's happening here? Right after the switch keyword is introduced, the given expression is evaluated. Then, a matching case is searched for using strict equality. If anything matches, it runs the code in that case. The break keyword stops the current switch statement, preventing the code from running for any more cases. If no matching value is found, the default runs.

Usually, case statements will use break between each case. This can help you avoid getting behavior or results that you don't expect.

Sometimes, the fallthrough behavior is helpful. For example, look at this code sample:

function getStateSalesTax(stateAbbreviation) {
  let result;
  switch (stateAbbreviation) {
    case "CA":
      result = 0.0725;
      break;
    case "CO":
      result = 0.029;
      break;
    case "GA":
      result = 0.04;
      break;
    case "MD":
    case "VT":
    case "WV":
      result = 0.06;
      break;
    default:
      result = 0;
  }

  return result;
}
In this example, "MD", "VT", and "WV" all have the same sales tax. Entering any one of those values will set the result to the same value.

The two functions discussed above will work in similar ways. Ultimately, it'll be up to you when you want to use a switch statement instead of a longer if/else statement.

If you want to learn more, consult MDN's page on the switch statement.

** iterate wip

Accumulator pattern
Pseudocoding
The process of writing the steps and logic that you would implement in code, but in normal language rather than in commands that a programming language could execute
Accumulator pattern
A chunk of code that uses a loop to accumulate data

let sum = 0; // accumulator
for () {
  sum += i;
}

Loop
    A construct that allows you to repeat a set of instructions a specific number of times, or until a specific condition is true

*** JavaScript For Loop

Loops can execute a block of code a number of times.
JavaScript Loops

Loops are handy, if you want to run the same code over and over again, each time with a different value.

Often this is the case when working with arrays:
Instead of writing:
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
text += cars[3] + "<br>";
text += cars[4] + "<br>";
text += cars[5] + "<br>";
You can write:
for (let i = 0; i < cars.length; i++) {
  text += cars[i] + "<br>";
}
Different Kinds of Loops

JavaScript supports different kinds of loops:

    for - loops through a block of code a number of times
    for/in - loops through the properties of an object
    for/of - loops through the values of an iterable object
    while - loops through a block of code while a specified condition is true
    do/while - also loops through a block of code while a specified condition is true

The For Loop

The for loop has the following syntax:
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}

Statement 1 is executed (one time) before the execution of the code block.

Statement 2 defines the condition for executing the code block.

Statement 3 is executed (every time) after the code block has been executed.
Example
for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}

From the example above, you can read:

Statement 1 sets a variable before the loop starts (let i = 0).

Statement 2 defines the condition for the loop to run (i must be less than 5).

Statement 3 increases a value (i++) each time the code block in the loop has been executed.
Statement 1

Normally you will use statement 1 to initialize the variable used in the loop (let i = 0).

This is not always the case, JavaScript doesn't care. Statement 1 is optional.

You can initiate many values in statement 1 (separated by comma):
Example
for (let i = 0, len = cars.length, text = ""; i < len; i++) {
  text += cars[i] + "<br>";
}

And you can omit statement 1 (like when your values are set before the loop starts):
Example
let i = 2;
let len = cars.length;
let text = "";
for (; i < len; i++) {
  text += cars[i] + "<br>";
}
Statement 2

Often statement 2 is used to evaluate the condition of the initial variable.

This is not always the case, JavaScript doesn't care. Statement 2 is also optional.

If statement 2 returns true, the loop will start over again, if it returns false, the loop will end.

If you omit statement 2, you must provide a break inside the loop. Otherwise the loop will never end. This will crash your browser. Read about breaks in a later chapter of this tutorial.
Statement 3

Often statement 3 increments the value of the initial variable.

This is not always the case, JavaScript doesn't care, and statement 3 is optional.

Statement 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.

Statement 3 can also be omitted (like when you increment your values inside the loop):
Example
let i = 0;
let len = cars.length;
let text = "";
for (; i < len; ) {
  text += cars[i] + "<br>";
  i++;
}
Loop Scope

Using var in a loop:
Example
var i = 5;

for (var i = 0; i < 10; i++) {
  // some code
}

// Here i is 10

Using let in a loop:
Example
let i = 5;

for (let i = 0; i < 10; i++) {
  // some code
}

// Here i is 5

In the first example, using var, the variable declared in the loop redeclares the variable outside the loop.

In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop.

When let is used to declare the i variable in a loop, the i variable will only be visible within the loop.
For/Of and For/In Loops

The for/in loop and the for/of loop are explained in the next chapter.
While Loops

The while loop and the do/while are explained in the next chapters.
Test Yourself With Exercises
Exercise:

Create a loop that runs from 0 to 9.

let i;
 ( = ;  < ; ) {
  console.log(i);
}


Start the Exercise

Iterate with JavaScript For Loops
You can run the same code multiple times by using a loop.
The most common type of JavaScript loop is called a for loop because it runs for a specific number of times.
For loops are declared with three optional expressions separated by semicolons:
for (a; b; c), where a is the initialization statement, b is the condition statement, and c is the final expression.
The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.
The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to true. When the condition is false at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.
The final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.
In the following example we initialize with i = 0 and iterate while our condition i < 5 is true. We'll increment i by 1 in each loop iteration with i++ as our final expression.
const ourArray = [];
for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}
ourArray will now have the value [0, 1, 2, 3, 4].
Use a for loop to push the values 1 through 5 onto myArray.
Iterate Odd Numbers With a For Loop
For loops don't have to iterate one at a time. By changing our final-expression, we can count by even numbers.
We'll start at i = 0 and loop while i < 10. We'll increment i by 2 each loop with i += 2.
const ourArray = [];
for (let i = 0; i < 10; i += 2) {
  ourArray.push(i);
}
ourArray will now contain [0, 2, 4, 6, 8]. Let's change our initialization so we can count by odd numbers.
Push the odd numbers from 1 through 9 to myArray using a for loop.
Count Backwards With a For Loop
A for loop can also count backwards, so long as we can define the right conditions.
In order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.
We'll start at i = 10 and loop while i > 0. We'll decrement i by 2 each loop with i -= 2.
const ourArray = [];
for (let i = 10; i > 0; i -= 2) {
  ourArray.push(i);
}
ourArray will now contain [10, 8, 6, 4, 2]. Let's change our initialization and final expression so we can count backwards by twos to create an array of descending odd numbers.
Push the odd numbers from 9 through 1 to myArray using a for loop.

Iterate Through an Array with a For Loop
A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a for loop. This code will output each element of the array arr to the console:
const arr = [10, 9, 8, 7, 6];
for (let i = 0; i < arr.length; i++) {
   console.log(arr[i]);
}
Remember that arrays have zero-based indexing, which means the last index of the array is length - 1. Our condition for this loop is i < arr.length, which stops the loop when i is equal to length. In this case the last iteration is i === 4 i.e. when i becomes equal to arr.length - 1 and outputs 6 to the console. Then i increases to 5, and the loop terminates because i < arr.length is false.
Declare and initialize a variable total to 0. Use a for loop to add the value of each element of the myArr array to total.

Nesting For Loops
If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
This outputs each sub-element in arr one at a time. Note that for the inner loop, we are checking the .length of arr[i], since arr[i] is itself an array.
Modify function multiplyAll so that it returns the product of all the numbers in the sub-arrays of arr.
for loop
for ( initialExpression; condition; incrementExpression) {
  loop body
}
intitalExpression let i = 1;
condition i <= 5;
incrementExpression i++;
initialExpression
This expression typically initializes the loop counter. It runs at the start of a loop. A very common example is let i = 0. The i variable is short for index, and it's frequently used for the index counter that you saw above.
condition
At the end of each loop, the condition expression is evaluated. In the example above, the condition is "if index is less than or equal to the countTo variable." If the value of the condition is true, the loop statement executes. If the value of the condition is false, the loop statement terminates. In the example above, index would eventually get to 6. At that point, because the value would be greater than 5, the loop would stop.
incrementExpression
At the end of each loop, this statement is executed. In the example above, the code is incrementing the variable index by 1 (++) each time through the loop. But it's important to note that you're not limited to incrementing by 1 for the final condition. Depending on what you're building or the problem you're solving, you can decrement (i--) by some amount, or you could increment by another amount, like 2 (index += 2). That said, incrementing by 1 is the most common technique.
loop body
If the condition is true, this code will run. In the example above, the loop body that executes uses console.log() to display the value of index during the loop.

i stand for index number

increment and decrement operators
i++, i--
i+=2, i-=2

make for loop over an array
for ( let i = 0; i < arr.length; i++ ) {
  console.log( arr[i] );

}

for () {
  var += arr[i]
}

for () {
  if () {
  }
  if () {
  }
}

*** JavaScript For In
The For In Loop

The JavaScript for in statement loops through the properties of an Object:
Syntax
for (key in object) {
  // code block to be executed
}
Example
const person = {fname:"John", lname:"Doe", age:25};

let text = "";
for (let x in person) {
  text += person[x];
}
Example Explained

    The for in loop iterates over a person object
    Each iteration returns a key (x)
    The key is used to access the value of the key
    The value of the key is person[x]

For In Over Arrays

The JavaScript for in statement can also loop over the properties of an Array:
Syntax
for (variable in array) {
  code
}
Example
const numbers = [45, 4, 9, 16, 25];

let txt = "";
for (let x in numbers) {
  txt += numbers[x];
}

Do not use for in over an Array if the index order is important.

The index order is implementation-dependent, and array values may not be accessed in the order you expect.

It is better to use a for loop, a for of loop, or Array.forEach() when the order is important.
Array.forEach()

The forEach() method calls a function (a callback function) once for each array element.
Example
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);

function myFunction(value, index, array) {
  txt += value;
}

Note that the function takes 3 arguments:

    The item value
    The item index
    The array itself

The example above uses only the value parameter. It can be rewritten to:
Example
const numbers = [45, 4, 9, 16, 25];

let txt = "";
numbers.forEach(myFunction);

function myFunction(value) {
  txt += value;
}

*** JavaScript For Of
The For Of Loop

The JavaScript for of statement loops through the values of an iterable object.

It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:
Syntax
for (variable of iterable) {
  // code block to be executed
}

variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.

iterable - An object that has iterable properties.
Browser Support

For/of was added to JavaScript in 2015 (ES6)

Safari 7 was the first browser to support for of:

Chrome 38 	Edge 12 	Firefox 51 	Safari 7 	Opera 25
Oct 2014 	Jul 2015 	Oct 2016 	Oct 2013 	Oct 2014

For/of is not supported in Internet Explorer.
Looping over an Array
Example
const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x;
}
Looping over a String
Example
let language = "JavaScript";

let text = "";
for (let x of language) {
text += x;
}
The While Loop

The while loop and the do/while loop are explained in the next chapter.

*** do while loop

Iterate with JavaScript Do...While Loops
The next type of loop you will learn is called a do...while loop. It is called a do...while loop because it will first do one pass of the code inside the loop no matter what, and then continue to run the loop while the specified condition evaluates to true.
const ourArray = [];
let i = 0;

do {
  ourArray.push(i);
  i++;
} while (i < 5);
The example above behaves similar to other types of loops, and the resulting array will look like [0, 1, 2, 3, 4]. However, what makes the do...while different from other loops is how it behaves when the condition fails on the first check. Let's see this in action: Here is a regular while loop that will run the code in the loop as long as i < 5:
const ourArray = [];
let i = 5;

while (i < 5) {
  ourArray.push(i);
  i++;
}
In this example, we initialize the value of ourArray to an empty array and the value of i to 5. When we execute the while loop, the condition evaluates to false because i is not less than 5, so we do not execute the code inside the loop. The result is that ourArray will end up with no values added to it, and it will still look like [] when all of the code in the example above has completed running. Now, take a look at a do...while loop:
const ourArray = [];
let i = 5;

do {
  ourArray.push(i);
  i++;
} while (i < 5);
In this case, we initialize the value of i to 5, just like we did with the while loop. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment i before we get to the condition check. When we finally evaluate the condition i < 5 on the last line, we see that i is now 6, which fails the conditional check, so we exit the loop and are done. At the end of the above example, the value of ourArray is [5]. Essentially, a do...while loop ensures that the code inside the loop will run at least once. Let's try getting a do...while loop to work by pushing values to an array.
Change the while loop in the code to a do...while loop so the loop will push only the number 10 to myArray, and i will be equal to 11 when your code has finished running.

*** JavaScript While Loop

Loops can execute a block of code as long as a specified condition is true.
The While Loop

The while loop loops through a block of code as long as a specified condition is true.
Syntax
while (condition) {
  // code block to be executed
}
Example

In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:
Example
while (i < 10) {
  text += "The number is " + i;
  i++;
}

If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.
The Do While Loop

The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
Syntax
do {
  // code block to be executed
}
while (condition);
Example

The example below uses a do while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:
Example
do {
  text += "The number is " + i;
  i++;
}
while (i < 10);

Do not forget to increase the variable used in the condition, otherwise the loop will never end!
Comparing For and While

If you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted.

The loop in this example uses a for loop to collect the car names from the cars array:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 0;
let text = "";

for (;cars[i];) {
  text += cars[i];
  i++;
}

The loop in this example uses a while loop to collect the car names from the cars array:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 0;
let text = "";

while (cars[i]) {
  text += cars[i];
  i++;
}
Test Yourself With Exercises
Exercise:

Create a loop that runs as long as i is less than 10.

let i = 0;
 (i  10) {
  console.log(i);
  i++
  }

Iterate with JavaScript While Loops
You can run the same code multiple times by using a loop.
The first type of loop we will learn is called a while loop because it runs while a specified condition is true and stops once that condition is no longer true.
const ourArray = [];
let i = 0;
while (i < 5) {
  ourArray.push(i);
  i++;
}
In the code example above, the while loop will execute 5 times and append the numbers 0 through 4 to ourArray.
Let's try getting a while loop to work by pushing values to an array.
Add the numbers 5 through 0 (inclusive) in descending order to myArray using a while loop.
*** JavaScript Break and Continue

The break statement "jumps out" of a loop.

The continue statement "jumps over" one iteration in the loop.
The Break Statement

You have already seen the break statement used in an earlier chapter of this tutorial. It was used to "jump out" of a switch() statement.

The break statement can also be used to jump out of a loop:
Example
for (let i = 0; i < 10; i++) {
  if (i === 3) { break; }
  text += "The number is " + i + "<br>";
}

In the example above, the break statement ends the loop ("breaks" the loop) when the loop counter (i) is 3.
The Continue Statement

The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

This example skips the value of 3:
Example
for (let i = 0; i < 10; i++) {
  if (i === 3) { continue; }
  text += "The number is " + i + "<br>";
}
JavaScript Labels

To label JavaScript statements you precede the statements with a label name and a colon:
label:
statements

The break and the continue statements are the only JavaScript statements that can "jump out of" a code block.

Syntax:
break labelname;

continue labelname;

The continue statement (with or without a label reference) can only be used to skip one loop iteration.

The break statement, without a label reference, can only be used to jump out of a loop or a switch.

With a label reference, the break statement can be used to jump out of any code block:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
list: {
  text += cars[0] + "<br>";
  text += cars[1] + "<br>";
  break list;
  text += cars[2] + "<br>";
  text += cars[3] + "<br>";
}

A code block is a block of code between { and }.
Test Yourself With Exercises
Exercise:

Make the loop stop when i is 5.

for (i = 0; i < 10; i++) {
  console.log(i);
  if (i == 5) {
    ;
  }
}


Start the Exercise

*** JavaScript Iterables

Iterables are iterable objects (like Arrays).

Iterables can be accessed with simple and efficient code.

Iterables can be iterated over with for..of loops
The For Of Loop

The JavaScript for..of statement loops through the elements of an iterable object.
Syntax
for (variable of iterable) {
  // code block to be executed
}
Iterating

Iterating is easy to understand.

It simply means looping over a sequence of elements.

Here are some easy examples:

    Iterating over a String
    Iterating over an Array

Iterating Over a String

You can use a for..of loop to iterate over the elements of a string:
Example
const name = "W3Schools";

for (const x of name) {
  // code block to be executed
}
Iterating Over an Array

You can use a for..of loop to iterate over the elements of an Array:
Example
const letters = ["a","b","c"];

for (const x of letters) {
  // code block to be executed
}

You can learn more details about Iterables in the chapter JS Object Iterables.
Iterating Over a Set

You can use a for..of loop to iterate over the elements of a Set:
Example
const letters = new Set(["a","b","c"]);

for (const x of letters) {
  // code block to be executed
}

Sets and Maps are covered in the next chapters.
Iterating Over a Map

You can use a for..of loop to iterate over the elements of a Map:
Example
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

for (const x of fruits) {
  // code block to be executed
}

*** looping over objects thinkful

Transforming objects into arrays
One way of looping over objects is to "cheat."
In this context, "cheating" means that instead of looping over an object, you'll actually transform part of the object into an array.
There are two methods that allow you to "cheat" in this way: Object.values() and Object.keys().

Accessing values
Often, you'll use objects to connect two pieces of information together.
For example, the following object connects names with addresses.

const people = {
  "Lee Finch": { address: "913 Hunts Lane", isCustomer: true },
  "Whitney Shawna": { address: "392 Norfolk Street", isCustomer: false },
  "Gabrielle Mayo": { address: "934 Engert Avenue", isCustomer: false },
};

However, what if you need to access just the values? You can do this by using Object.values(), passing in the object.
This method will return an array of all the values in any given object.

See the example below:
const addresses = Object.values(people);
//> [
//>   { address: "913 Hunts Lane", isCustomer: true },
//>   { address: "392 Norfolk Street", isCustomer: false },
//>   { address: "934 Engert Avenue", isCustomer: false },
//> ]
You can now loop over these values as you would in an array. Pretty nifty!

Accessing keys
Now, imagine that you need to access just the keys of an object.
This is where a similar method, Object.keys(), comes in handy.

Take a look:
const names = Object.keys(people);
//> [ "Lee Finch", "Whitney Shawna", "Gabrielle Mayo" ];
And yet again, you're set up to loop over this array however you like.

Looping over objects
Generally, the two methods described above will be sufficient for the work that you'll do.
They'll help you "cheat" to create an array that you can then loop over as needed.
However, sometimes it'll be easier to loop through an object on its own.
In those cases, you will use a for/in loop.


Now, take a look at the code sample below:
for (let name in people) {
  const person = people[name];
  const address = person.address;
  console.log(`Sending mail to ${name} at ${address}.`);
}
In the above for/in loop, people is the entire object, and name will be every object key. The code will run as many times as there are keys within the for/in loop block. This will allow you access to every key and value in the object.

This same process can be performed by using Object.keys() in place of the for/in syntax.
However, the for/in syntax is generally recommended because it takes less code and more clearly demonstrates the purpose of the code.

Do this
Use a for/in loop

Try running the following code directly. Can you identify the data types of people, name, person, and address here? Take a moment to consider what those data types might be and to predict what the code will do before you run it.

const people = {
  "Lee Finch": { address: "913 Hunts Lane", isCustomer: true },
  "Whitney Shawna": { address: "392 Norfolk Street", isCustomer: false },
  "Gabrielle Mayo": { address: "934 Engert Avenue", isCustomer: false },
};


for (let name in people) {
  const person = people[name];
  const address = person.address;
  console.log(`Sending mail to ${name} at ${address}.`);
}

for-in loops
use it to iterate over the keys of objects
let object = {
  name: "Alice",
  location: "Sealand"
};
for (let key in object) {
  //  Logs "name Alice",  "location Sealand"
  console.log(key, object[key]);
};
