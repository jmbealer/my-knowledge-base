:PROPERTIES:
:ID:       626859c7-4f90-41d5-a450-d37bf06f24fb
:mtime:    20230206181410 20221015202351
:ctime:    20221015190454
:END:
#+title: Grokking the Coding Interview: Patterns for Coding Questions

This course categorizes coding interview problems into a set of 16 patterns.
Each pattern will be a complete tool - consisting of data structures,
algorithms, and analysis techniques - to solve a specific category of problems.
-----

* sliding window

In many problems dealing with an array (or a LinkedList), we are asked to find
or calculate something among all the contiguous subarrays (or sublists) of a
given size. For example, take a look at this problem:

Given an array, find the average of all contiguous subarrays of size ‘K’ in it.

Let’s understand this problem with a real input:
Array: [1, 3, 2, 6, -1, 4, 1, 8, 2], K=5

Here, we are asked to find the average of all contiguous subarrays of size ‘5’
in the given array. Let’s solve this:

1. For the first 5 numbers (subarray from index 0-4), the average is:
   (1+3+2+6-1)/5 => 2.2(1+3+2+6−1)/5=>2.2
2. The average of next 5 numbers (subarray from index 1-5) is: (3+2+6-1+4)/5 =>
   2.8(3+2+6−1+4)/5=>2.8
3. For the next 5 numbers (subarray from index 2-6), the average is:
   (2+6-1+4+1)/5 => 2.4(2+6−1+4+1)/5=>2.4
…

Here is the final output containing the averages of all contiguous subarrays of
size 5:

Output: [2.2, 2.8, 2.4, 3.6, 2.8]
A brute-force algorithm will be to calculate the sum of every 5-element
contiguous subarray of the given array and divide the sum by ‘5’ to find the
average.
This is what the algorithm will look like:

#+begin_src js
function find_averages_of_subarrays(K, arr) {
  const result = [];
  for (let i = 0; i < arr.length - K + 1; i++) {
    // find sum of next 'K' elements
    sum = 0.0;
    for (let j = i; j < i + K; j++) {
      sum += arr[j];
    }
    // calculate average
    result.push(sum / K);
  }
  return result;
}

const result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2]);
console.log(`Averages of subarrays of size K: ${result}`);
#+end_src

#+RESULTS:
: Averages of subarrays of size K: 2.2,2.8,2.4,3.6,2.8


Time complexity: Since for every element of the input array, we are calculating
the sum of its next ‘K’ elements, the time complexity of the above algorithm
will be O(N*K)O(N∗K) where ‘N’ is the number of elements in the input array.

Can we find a better solution? Do you see any inefficiency in the above
approach?

The inefficiency is that for any two consecutive subarrays of size ‘5’, the
overlapping part (which will contain four elements) will be evaluated twice. For
example, take the above-mentioned input:

[[~/Documents/org/software-engineering/sliding-window-1.png]]

As you can see, there are four overlapping elements between the subarray
(indexed from 0-4) and the subarray (indexed from 1-5). Can we somehow reuse the
sum we have calculated for the overlapping elements?

The efficient way to solve this problem would be to visualize each contiguous
subarray as a sliding window of ‘5’ elements. This means that when we move on to
the next subarray, we will slide the window by one element. So, to reuse the sum
from the previous subarray, we will subtract the element going out of the window
and add the element now being included in the sliding window. This will save us
from going through the whole subarray to find the sum and, as a result, the
algorithm complexity will reduce to O(N)O(N).

[[~/Documents/org/software-engineering/sliding-window-2.png]]

Here is the algorithm for the Sliding Window approach:

#+begin_src js
function find_averages_of_subarrays(K, arr) {
  const result = [];
  let windowSum = 0.0, windowStart = 0;
  for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {
    // add the next element
    windowSum += arr[windowEnd];
    // slide the window, when end hits K
    if (windowEnd >= K - 1) {
      // calculate the average
      result.push(windowSum / K);
      // subtract the element going out
      windowSum -= arr[windowStart];
      // slide the window ahead
      // windowStart += 1;
      windowStart++
    }
  }
  return result;
}

const result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2]);
console.log(`Averages of subarrays of size K: ${result}`);
#+end_src

#+RESULTS:
: Averages of subarrays of size K: 2.2,2.8,2.4,3.6,2.8

In the following chapters, we will apply the Sliding Window approach to solve a
few problems.

In some problems, the size of the sliding window is not fixed. We have to expand
or shrink the window based on the problem constraints. We will see a few
examples of such problems in the next chapters.


* two pointers

* fast & slow pointers

* merge intervals

* cyclic sort

* in-place reversal of a linkedlist

* tree breadth first search

* tree depth first search

* two heaps

* subsets

* modified binary search

* bitwise xor

* top 'k' elements

* k-way merge

* knapsack (dynamic programming)

* topological sort (graph)

* miscellaneous
