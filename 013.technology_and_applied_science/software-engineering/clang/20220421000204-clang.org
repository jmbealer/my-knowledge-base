:PROPERTIES:
:ID:       5c4573b4-c79d-4bcd-9fb8-7f22e64f1675
:mtime:    20230303112651 20230207102206 20230206181403 20230129105124
:ctime:    20220421000204
:END:
#+title: C Programming Language

[[id:aba4c4fe-deb5-4f35-8099-264cb2217536][clang-certs]]
[[id:4e5f29f4-238d-4dff-891e-1bd7762345e5][cIdioms]]

[[https://en.wikipedia.org/wiki/C_(programming_language)][C (programming language) - Wikipedia]]


#+begin_src C
#include <stdio.h>
int main(void) {
  /* printf("Hello World"); */
  puts("Hello World");
  return 0;
}
#+end_src

#include <stdio.h>
This line tells the compiler to include the contents of the standard library header file stdio.h in the program.
Headers are usually files containing function declarations, macros and data types, and you must include the header file before you use them.
This line includes stdio.h so it can call the function puts().

int main(void)
This line starts the definition of a function.
It states the name of the function (main), the type and number of arguments it expects (void, meaning none), and the type of value that this function returns (int).
Program execution starts in the main() function.

{...}
The curly braces are used in pairs to indicate where a block of code begins and ends.
They can be used in a lot of ways, but in this case they indicate where the function begins and ends.

puts("Hello, World");
This line calls the puts() function to output text to standard output (the screen, by default), followed by a newline.
The string to be output is included within the parentheses.
"Hello, World" is the string that will be written to the screen. In C, every string literal value must be inside the
double quotes "...".

In C programs, every statement needs to be terminated by a semi-colon (i.e. ;).
return 0;
When we defined main(), we declared it as a function returning an int, meaning it needs to return an integer.
In this example, we are returning the integer value 0, which is used to indicate that the program exited successfully.
After the return 0; statement, the execution process will terminate.

#+begin_src C
#include <stdio.h>
int square(int x) {
  return x * x;
}

int main(void) {
  printf("Hello World");
  int res = square(10);
  printf(res);
  printf("Result is: %d", res);
  printf(square(5));
  return 0;
}
#+end_src

#+RESULTS:


What is C?
C is a general-purpose programming language.

When was C created ?
C started its developed in 1972 at Bell L

What was built in C?
C has been used to develop operating systems, databases, applications, etc

Who created C?
Dennis Ritchie

Difference between C and C++
C++ was developed as an extension of C, and both languages have almost the same syntax
The main difference between C and C++ is that C++ support classes and objects,
while C does not

* unsorted

** Compiling and running the program
To run the program, this source file (hello.c) first needs to be compiled into an executable file (e.g. hello on
Unix/Linux system or hello.exe on Windows). This is done using a compiler for the C language.

** Compile using GCC
GCC (GNU Compiler Collection) is a widely used C compiler. To use it, open a terminal, use the command line to
navigate to the source file's location and then run:
gcc hello.c -o hello
If no errors are found in the the source code (hello.c), the compiler will create a binary file, the name of which is
given by the argument to the -o command line option (hello). This is the final executable file.
We can also use the warning options -Wall -Wextra -Werror, that help to identify problems that can cause the
program to fail or produce unexpected results. They are not necessary for this simple program but this is way of
adding them:
gcc -Wall -Wextra -Werror -o hello hello.c

** Using the clang compiler
To compile the program using clang you can use:
clang -Wall -Wextra -Werror -o hello hello.c
By design, the clang command line options are similar to those of GCC.

** Executing the program
Once compiled, the binary file may then be executed by typing ./hello in the terminal. Upon execution, the

** c programming
Overview of C

    Operating System Independence
    Design Goals and Capabilities
    Flavors of C

	Compiler Directives and the C Preprocessor

    Compile-Time Directives
    Use of typedef
    C Preprocessor Syntax

Fundamental Data Types, Storage Classes, and Scope

    Fundamental Data Types and Qualifiers
    Constants and Strings
    Storage Classes
    Scope and Block Structure
    Scope and Data Hiding
    Data Initialization

	Pointers and Dynamic Allocation

    Advantages of Pointers
    User of Pointers
    Pointer and Address Arithmetic
    Dynamic Storage Allocation
    sizeof Operator
    Double Indirection

Macros

    Functions vs. Inlining
    Purpose of Macros
    Use of Macros
        Making Code More Readable
        Auto Adjustment of Compile Time Values
        Conditional Compilation
        Making Code Portable
        Simplifying Complex Access Calculations
    Advanced Micro Design Tips
    Using Macros to Help Write Portable Programs
    When to Use a Macro instead of a Function
    Using Macros for Debugging

	Arrays

    Purpose of Arrays
    Declaring an Array
    Initializing an Array
    Addressing Elements
    Stepping Through an Array
    Variable Size Arrays
    Arrays of Pointers
    Arrays of Strings
    Passing an Array to a Function
    Dynamic Memory Allocation
    Multidimensional Arrays

Basic Formatted I/O

    Standard I/O Library
    Character Set Encoding
    Standard Input and Output
    Character I/O Functions
    Formatted I/O Functions
    String Constants

	Program Debugging

    Problem Analysis
    Instrumenting with printif
    Instrumenting with ctrace
    The Purpose of Debuggers
    How Not to Use Debuggers
    Symbolic Debuggers

Operators and Expressions

    Arithmetic, Logical, and Bit Operators
    Precedence and Associativity
    Assignment and Casting
    The Conditional Operator

	Flow Control Constructs

    Conditional Constructs: if, switch
    Looping Constructs: while, do, for
    Programming Style

Functions (Subroutines)

    Purpose of Functions
    Functions vs. Inlining
    Automatic Variables
    The Argument Stack
    Passing By Value
    Passing By Reference
    Declaring External Functions
    Function Prototyping
    ANSI Prototyping
    The _NO_PROTO Compiler Symbol
    Varargs Functions
    Passing a Function as an Argument
    Designing Functions for Reusability
    Calling a Function from Another Language
    Returning a Dynamically Allocated Value Using Double Indirection
    Casting the Return Value of a Function
    Recursion and Reentrancy

	Structures

    Purpose of Structures
    Defining and Declaring Structures
    Accessing Members
    Pointers to Structures
    Dynamic Memory Allocation
    Passing a Structure to a Function
        As a Pointer
        Passing the Actual Structure

Advanced Structures and Unions

    Nested Structures
    Arrays of Structures
    Bit Fields
    Unions
    Linked Lists

	C Runtime Library Standard Functions

    Character I/O
    Unformatted File I/O
    Formatted File I/O
    Math Functions
    Miscellaneous Functions

Strings and Character Manipulation

    Strings as Character Arrays
    String Library Functions
    Reading and Writing Strings

	Accessing Command Line Arguments and Environment Symbols

    argc and argv
    Parsing Command Line Options
    Accessing the Environment Array

Structured Programming

    Structuring Code for Quality, Reliability, Maintainability
    Designing for Modularity and Reusability

	Advanced Programming Consideration

    Writing Portable Code
    Use of Macros
    ANSI C Limits
    Feature Test Macros
    Client/Server Design
    Performance Considerations
